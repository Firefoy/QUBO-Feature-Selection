# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19U5uBeDmYMzpBfXxBhAzFyJIz2N5y1-k
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.datasets import fetch_openml
import matplotlib.pyplot as plt

# Load the dataset
data = fetch_openml(name='MiniBooNE', version=1, parser='auto')

# Extract features (X) and target (y)
X = data.data
y = data.target

# Convert both to DataFrame/Series explicitly
X_df = pd.DataFrame(X, columns=X.columns)
y_df = pd.Series(y, name='target')

# Combine into one DataFrame
df = pd.concat([X_df, y_df], axis=1)

df

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_df)

X_scaled_df = pd.DataFrame(X_scaled, columns=X_df.columns)
X_scaled_df.head()

pca = PCA(n_components=0.95)
X_pca = pca.fit_transform(X_scaled)

print(f"Number of components chosen: {pca.n_components_}")

X_train, X_test, y_train, y_test = train_test_split(X_pca, y_df, test_size=0.3, random_state=42)

clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f"PCA-based classification accuracy: {accuracy:.4f}")

plt.figure(figsize=(8, 4))
plt.plot(
    range(1, len(pca.explained_variance_ratio_) + 1),
    np.cumsum(pca.explained_variance_ratio_),
    marker='o'
)
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Explained Variance')
plt.title('Explained Variance by PCA Components')
plt.grid(True)
plt.show()

plt.figure(figsize=(8,6))
plt.scatter(X_pca[:,0], X_pca[:,1], c=(y_df == 'signal'), cmap='coolwarm', s=3)
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.title('MiniBooNE PCA Projection')
plt.show()

pd.DataFrame(pca.components_)

import numpy as np

print(np.cumsum(pca.explained_variance_ratio_))

loadings = pd.DataFrame(
    pca.components_.T,
    columns=[f'PC{i+1}' for i in range(pca.n_components_)],
    index=[f'Feature_{i+1}' for i in range(X_scaled.shape[1])]
)
print(loadings.head())

print(loadings['PC1'].sort_values(ascending=False).head(10))